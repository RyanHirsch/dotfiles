execute pathogen#infect()

set expandtab
set tabstop=2
set shiftwidth=2
set number
set cursorline
set hidden

syntax on
syntax enable

filetype plugin indent on

" colorscheme monokai
colorscheme OceanicNext
set background=dark

highlight CursorLine ctermbg=234
highlight LineNr ctermbg=234
highlight LineNr ctermfg=231
highlight LineNr cterm=bold

if has("gui_running")
    " set background=dark
    " colorscheme solarized
    " let g:solarized_termcolors=256

    if has("gui_gtk2")
        set guifont=Inconsolata\ 12
    elseif has("gui_macvim")
        set guifont=Menlo\ Regular:h14
    elseif has("gui_win32")
        set guifont=Consolas:h14:cANSI
    endif
else
    set t_Co=256
    set term=screen-256color
endif

function! FormatJSON()
    :'<,'>!python -m json.tool
endfunction
command! -range FormatJSON call FormatJSON()
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

let mapleader = "\<Space>"

noremap <C-n> :call NumberToggle()<CR>
noremap <leader>d :bp\|bd #<CR>
nnoremap <Leader>o :CtrlP<CR>
nnoremap <Leader>w :w<CR>
map <C-e> :NERDTreeToggle<CR>

vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

nnoremap <CR> G
nnoremap <BS> gg

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

 " Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

map <Leader>h :bprev<CR>
map <Leader>l :bnext<CR>

" Move down to next row when lines wrap
nnoremap j gj
nnoremap k gk

" Remove trailling whitespace on :w
autocmd BufWritePre * :%s/\s\+$//e

vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>

" let g:airline_theme='oceanicnext'
let g:jsx_ext_required = 0
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_powerline_fonts = 1

let g:ctrlp_custom_ignore = 'node_modules\|bower_components\|tmp\|git'
let g:mustache_abbreviations = 1

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" let g:syntastic_javascript_eslint_exec = '/Users/ryanhirsch/.nvm/versions/node/v5.8.0/bin/eslint'
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_enable_javascript_checker = 1

function! DeleteInactiveBufs()
    "From tabpagebuflist() help, get a list of all buffers in all tabs
    let tablist = []
    for i in range(tabpagenr('$'))
        call extend(tablist, tabpagebuflist(i + 1))
    endfor

    "Below originally inspired by Hara Krishna Dara and Keith Roberts
    "http://tech.groups.yahoo.com/group/vim/message/56425
    let nWipeouts = 0
    for i in range(1, bufnr('$'))
        if bufexists(i) && !getbufvar(i,"&mod") && index(tablist, i) == -1
            "bufno exists AND isn't modified AND isn't in the list of buffers open in windows and tabs
            silent exec 'bwipeout' i
            let nWipeouts = nWipeouts + 1
        endif
    endfor
    echomsg nWipeouts .  ' buffer(s) wiped out'
endfunction
command!  Bdi :call DeleteInactiveBufs()

set directory=~/.vim/_tmp/
set backupdir=~/.vim/backup/

autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd Filetype elixir setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

runtime! plugin/sensible.vim

